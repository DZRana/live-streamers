{"version":3,"sources":["components/StreamerListSidebar/StreamerCard.js","components/Navbar/TopNavbar.jsx","components/StreamerListSidebar/StreamerListSidebar.jsx","apis/twitch.js","containers/App.js","serviceWorker.js","index.js"],"names":["StreamerCard","user_name","title","viewer_count","url","profile_image_url","changeChannel","className","onClick","src","alt","TopNavbar","streamerArr","as","open","Button","Panel","map","user","i","toLowerCase","id","StreamerListSidebar","oauth","document","location","hash","substring","axios","create","baseURL","headers","Authorization","process","App","useState","setStreamerArr","currentChannel","setCurrentChannel","getUserData","a","userId","streamerIdArr","twitch","get","response","data","params","from_id","first","streamer","push","to_id","getStreamerData","queryString","length","newStreamerArr","attr","existingStreamer","streamerProfile","login","setTimeout","useEffect","href","controls","playing","width","height","frameBorder","scrolling","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAiCeA,EA/BM,SAAC,GAOf,IANLC,EAMI,EANJA,UACAC,EAKI,EALJA,MACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,cAEA,OACE,sBACEC,UAAU,sEACVC,QAAS,kBAAMF,EAAcF,IAF/B,UAIE,sBAAKG,UAAU,WAAf,UACE,qBACEA,UAAU,4BACVE,IAAKJ,EACLK,IAAI,aAEN,gCACE,qBAAKH,UAAU,eAAf,SAA+BN,IAC/B,qBAAKM,UAAU,kBAAf,4BAA8CJ,WAGlD,qBAAKI,UAAU,kFAAf,SACGL,QCmCMS,EAzDG,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,YAAaN,EAAoB,EAApBA,cAKhC,OACE,cAAC,IAAD,CAAYO,GAAG,MAAMN,UAAU,cAA/B,SACG,gBAAGO,EAAH,EAAGA,KAAH,OACC,qCACE,qBAAKP,UAAU,+BAAf,SACE,sBAAKA,UAAU,kDAAf,UACE,qBAAKA,UAAU,8CAAf,SAEE,eAAC,IAAWQ,OAAZ,CAAmBR,UAAU,4KAA7B,UACE,sBAAMA,UAAU,UAAhB,4BACCO,EACC,cAAC,IAAD,CAAOP,UAAU,gBAAgB,cAAY,SAE7C,cAAC,IAAD,CAAUA,UAAU,gBAAgB,cAAY,cAItD,qBAAKA,UAAU,2DAAf,SACE,qBAAKA,UAAU,kCAAf,SACE,sBAAMA,UAAU,uBAAhB,qCAMR,cAAC,IAAWS,MAAZ,UACE,qBAAKT,UAAU,yCAAf,SACGK,EAAYK,KAAI,SAACC,EAAMC,GACtB,OACE,cAAC,IAAWJ,OAAZ,CAAmBF,GAAG,SAAtB,SACE,cAAC,EAAD,CAEEZ,UAAWW,EAAYO,GAAGlB,UAC1BC,MAAOU,EAAYO,GAAGjB,MACtBC,aAAcS,EAAYO,GAAGhB,aAC7BC,IAAG,gCAA2BQ,EAC5BO,GACAlB,UAAUmB,eACZf,kBAAmBO,EAAYO,GAAGd,kBAClCC,cAAeA,GARVM,EAAYO,GAAGE,oBChB3BC,EAtBa,SAAC,GAAoC,IAAlCV,EAAiC,EAAjCA,YAAaN,EAAoB,EAApBA,cAC1C,OACE,6BACGM,EAAYK,KAAI,SAACC,EAAMC,GACtB,OACE,cAAC,EAAD,CAEElB,UAAWW,EAAYO,GAAGlB,UAC1BC,MAAOU,EAAYO,GAAGjB,MACtBC,aAAcS,EAAYO,GAAGhB,aAC7BC,IAAG,gCAA2BQ,EAC5BO,GACAlB,UAAUmB,eACZf,kBAAmBO,EAAYO,GAAGd,kBAClCC,cAAeA,GARVM,EAAYO,GAAGE,U,kCCP1BE,EAAK,iBAAaC,SAASC,SAASC,KAAKC,UAAU,GAAI,KAG9CC,MAAMC,OAAO,CAC1BC,QAAS,8BACTC,QAAS,CACPC,cAAeT,EACf,YANaU,oCC2IFC,EAxIH,WACV,MAAsCC,mBAAS,IAA/C,mBAAOvB,EAAP,KAAoBwB,EAApB,KACA,EAA4CD,mBAAS,IAArD,mBAAOE,EAAP,KAAuBC,EAAvB,KAQMC,EAAW,uCAAG,wCAAAC,EAAA,6DACdC,EAAS,GACTC,EAAgB,GAFF,SAKGC,EAAOC,IAAI,UALd,cAKdC,EALc,OAMlBJ,EAASI,EAASC,KAAKA,KAAK,GAAGzB,GANb,SASDsB,EAAOC,IAAI,iBAAkB,CAC5CG,OAAQ,CACNC,QAASP,EACTQ,MAAO,OAZO,OASlBJ,EATkB,qBAeGA,EAASC,KAAKA,MAfjB,IAelB,2BAASI,EAAgC,QACvCR,EAAcS,KAAKD,EAASE,OAhBZ,8BAqBZC,EArBY,+BAAAb,EAAA,MAqBM,sDAAAA,EAAA,sDAEtB,IADIc,EAAc,oBACTnC,EAAI,EAAGA,EAAIuB,EAAca,OAAQpC,IACpCA,IAAMuB,EAAca,OAAS,EAC/BD,GAAW,UAAOZ,EAAcvB,GAArB,aACRmC,GAAeZ,EAAcvB,GALd,gBAOLwB,EAAOC,IAAIU,GAPN,OAOtBT,EAPsB,OAQlBW,EAAiB,GARC,cASDX,EAASC,KAAKA,MATb,IAStB,2BAASI,EAAgC,SACnCO,EAAO,IACP,GAASP,EAAS7B,GACtBoC,EAAI,UAAgBP,EAASjD,UAC7BwD,EAAI,MAAYP,EAAShD,MACzBuD,EAAI,aAAmBP,EAAS/C,aAChCqD,EAAeL,KAAKM,GAfA,8BAoBtB,IADAH,EAAc,gBACLnC,EAAI,EAAGA,EAAIqC,EAAeD,OAAQpC,IACrCA,IAAMqC,EAAeD,OAAS,EAChCD,GAAW,UAAOE,EAAerC,GAAGlB,UAAzB,WACRqD,GAAeE,EAAerC,GAAGlB,UAvBlB,iBA0BL0C,EAAOC,IAAIU,GA1BN,QA2BtB,IADAT,EA1BsB,OA2BtB,MAA6BW,EAA7B,eAA6C,CAApCE,EAAoC,mBACfb,EAASC,KAAKA,MADC,IAC3C,2BAASa,EAAuC,QAE5CD,EAAiBzD,UAAUmB,gBAAkBuC,EAAgBC,QAE7DF,EAAgB,kBACdC,EAAgBtD,mBANqB,+BAU7C+B,EAAeoB,GACfK,WAAWR,EAAiB,MAtCN,4CArBN,qDA6DlBA,IA7DkB,4CAAH,qDAgEX/C,EAAgB,SAACF,GACrBkC,EAAkBlC,IAOpB,OAJA0D,qBAAU,WACRvB,MACC,IAE+B,KAA3Bf,SAASC,SAASC,KACvB,qBAAKnB,UAAU,gBAAf,SACE,sBAAMA,UAAU,SAAhB,SACE,mBACEA,UAAU,uEACVwD,KAAI,0DAnFK9B,iCAmFL,yBAlFa,2CAkFb,gDAFN,uBAQqB,IAAvBrB,EAAY2C,OACd,qBAAKhD,UAAU,gBAAf,SACE,sBAAMA,UAAU,8BAAhB,uBAGF,sBAAKA,UAAU,oBAAf,UACE,cAAC,EAAD,CAAWK,YAAaA,EAAaN,cAAeA,IACpD,qBAAKC,UAAU,SAAf,SACE,cAAC,EAAD,CACEK,YAAaA,EACbN,cAAeA,MAGnB,sBAAKC,UAAU,8CAAf,UACE,qBAAKA,UAAU,2CAAf,SACE,cAAC,IAAD,CACEH,IAAKiC,EACL2B,UAAQ,EACRC,SAAO,EACPC,MAAM,OACNC,OAAO,WAGX,qBAAK5D,UAAU,2CAAf,SACG8B,GACC,wBACEnC,MAAM,OACNkE,YAAY,IACZC,UAAU,MACVhD,GAAG,aACHZ,IAAG,sCAAiC4B,EAAeV,UACjD,IADC,wBArHE,mBAqHF,eAGHuC,MAAM,OACNC,OAAO,kBCzHDG,QACW,cAA7BC,OAAO9C,SAAS+C,UAEe,UAA7BD,OAAO9C,SAAS+C,UAEhBD,OAAO9C,SAAS+C,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASnD,SAASoD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e53f39b4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst StreamerCard = ({\r\n  user_name,\r\n  title,\r\n  viewer_count,\r\n  url,\r\n  profile_image_url,\r\n  changeChannel,\r\n}) => {\r\n  return (\r\n    <div\r\n      className=\"flex flex-row mb-2 border-double border-4 rounded border-purple-400\"\r\n      onClick={() => changeChannel(url)}\r\n    >\r\n      <div className=\"flex-col\">\r\n        <img\r\n          className=\"sm:m-auto sm:w-52 md:w-36\"\r\n          src={profile_image_url}\r\n          alt=\"Streamer\"\r\n        />\r\n        <div>\r\n          <div className=\"text-red-500\">{user_name}</div>\r\n          <div className=\"text-purple-400\">{`Viewers: ${viewer_count}`}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"w-full px-5 m-auto text-yellow-500 md:text-xl overflow-ellipsis overflow-hidden\">\r\n        {title}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StreamerCard;\r\n","import React from \"react\";\r\nimport { Disclosure, Menu, Transition } from \"@headlessui/react\";\r\nimport { MenuIcon, XIcon } from \"@heroicons/react/outline\";\r\nimport StreamerCard from \"../StreamerListSidebar/StreamerCard\";\r\n\r\nconst TopNavbar = ({ streamerArr, changeChannel }) => {\r\n  function classNames(...classes) {\r\n    return classes.filter(Boolean).join(\" \");\r\n  }\r\n\r\n  return (\r\n    <Disclosure as=\"nav\" className=\"bg-gray-800\">\r\n      {({ open }) => (\r\n        <>\r\n          <div className=\"mx-auto px-2 md:px-6 lg:px-8\">\r\n            <div className=\"relative flex items-center justify-between h-16\">\r\n              <div className=\"absolute inset-y-0 left-0 flex items-center\">\r\n                {/* Mobile menu button*/}\r\n                <Disclosure.Button className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\">\r\n                  <span className=\"sr-only\">Open main menu</span>\r\n                  {open ? (\r\n                    <XIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\r\n                  ) : (\r\n                    <MenuIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\r\n                  )}\r\n                </Disclosure.Button>\r\n              </div>\r\n              <div className=\"flex-1 flex items-center justify-center md:items-stretch\">\r\n                <div className=\"flex-shrink-0 flex items-center\">\r\n                  <span className=\"text-white font-bold\">Live Streamers</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <Disclosure.Panel>\r\n            <div className=\"px-2 pt-2 pb-3 space-y-1 flex flex-col\">\r\n              {streamerArr.map((user, i) => {\r\n                return (\r\n                  <Disclosure.Button as=\"button\">\r\n                    <StreamerCard\r\n                      key={streamerArr[i].id}\r\n                      user_name={streamerArr[i].user_name}\r\n                      title={streamerArr[i].title}\r\n                      viewer_count={streamerArr[i].viewer_count}\r\n                      url={`https://www.twitch.tv/${streamerArr[\r\n                        i\r\n                      ].user_name.toLowerCase()}`}\r\n                      profile_image_url={streamerArr[i].profile_image_url}\r\n                      changeChannel={changeChannel}\r\n                    />\r\n                  </Disclosure.Button>\r\n                );\r\n              })}\r\n            </div>\r\n          </Disclosure.Panel>\r\n        </>\r\n      )}\r\n    </Disclosure>\r\n  );\r\n};\r\n\r\nexport default TopNavbar;\r\n\r\n/*\r\nreturn (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <a href=\"https://dzrana.github.io/live-streamers/\">Live Streamers</a>\r\n        </div>\r\n        <div>\r\n          <div>\r\n            <div>Streamers</div>\r\n            <div>\r\n              <ul>\r\n                {streamerArr.map((user, i) => {\r\n                  return (\r\n                    <StreamerCard\r\n                      key={streamerArr[i].id}\r\n                      user_name={streamerArr[i].user_name}\r\n                      title={streamerArr[i].title}\r\n                      viewer_count={streamerArr[i].viewer_count}\r\n                      url={`https://www.twitch.tv/${streamerArr[\r\n                        i\r\n                      ].user_name.toLowerCase()}`}\r\n                      profile_image_url={streamerArr[i].profile_image_url}\r\n                      changeChannel={changeChannel}\r\n                    />\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n*/\r\n","import React from \"react\";\r\nimport StreamerCard from \"./StreamerCard\";\r\n\r\nconst StreamerListSidebar = ({ streamerArr, changeChannel }) => {\r\n  return (\r\n    <ul>\r\n      {streamerArr.map((user, i) => {\r\n        return (\r\n          <StreamerCard\r\n            key={streamerArr[i].id}\r\n            user_name={streamerArr[i].user_name}\r\n            title={streamerArr[i].title}\r\n            viewer_count={streamerArr[i].viewer_count}\r\n            url={`https://www.twitch.tv/${streamerArr[\r\n              i\r\n            ].user_name.toLowerCase()}`}\r\n            profile_image_url={streamerArr[i].profile_image_url}\r\n            changeChannel={changeChannel}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default StreamerListSidebar;\r\n","import axios from \"axios\";\r\n\r\nconst oauth = `Bearer ${document.location.hash.substring(14, 44)}`;\r\nconst clientId = process.env.REACT_APP_CLIENT_ID;\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://api.twitch.tv/helix\",\r\n  headers: {\r\n    Authorization: oauth,\r\n    \"Client-ID\": clientId,\r\n  },\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TopNavbar from \"../components/Navbar/TopNavbar\";\r\nimport StreamerListSidebar from \"../components/StreamerListSidebar/StreamerListSidebar\";\r\nimport TwitchPlayer from \"react-player\";\r\nimport twitch from \"../apis/twitch\";\r\n\r\nconst App = () => {\r\n  const [streamerArr, setStreamerArr] = useState([]);\r\n  const [currentChannel, setCurrentChannel] = useState(\"\");\r\n\r\n  const clientId = process.env.REACT_APP_CLIENT_ID;\r\n  const redirect_baseUri = \"https://dzrana.github.io/live-streamers/\";\r\n  const chat_url = \"dzrana.github.io\";\r\n  const redirect_baseUri_local = \"http://localhost:3000/\";\r\n  const chat_url_local = \"localhost:3000\";\r\n\r\n  const getUserData = async () => {\r\n    let userId = \"\";\r\n    let streamerIdArr = [];\r\n\r\n    // Get logged-in user's id.\r\n    let response = await twitch.get(\"/users\");\r\n    userId = response.data.data[0].id;\r\n\r\n    // Get logged-in user's list of followed channels using the received id.\r\n    response = await twitch.get(\"/users/follows\", {\r\n      params: {\r\n        from_id: userId,\r\n        first: 100,\r\n      },\r\n    });\r\n    for (let streamer of response.data.data) {\r\n      streamerIdArr.push(streamer.to_id);\r\n    }\r\n\r\n    // Get LIVE channels and their channel profiles.\r\n    // Get LIVE channels\r\n    const getStreamerData = async () => {\r\n      let queryString = \"/streams?user_id=\";\r\n      for (let i = 0; i < streamerIdArr.length; i++) {\r\n        if (i !== streamerIdArr.length - 1)\r\n          queryString += `${streamerIdArr[i]}&user_id=`;\r\n        else queryString += streamerIdArr[i];\r\n      }\r\n      response = await twitch.get(queryString);\r\n      let newStreamerArr = [];\r\n      for (let streamer of response.data.data) {\r\n        let attr = {};\r\n        attr[\"id\"] = streamer.id;\r\n        attr[\"user_name\"] = streamer.user_name;\r\n        attr[\"title\"] = streamer.title;\r\n        attr[\"viewer_count\"] = streamer.viewer_count;\r\n        newStreamerArr.push(attr);\r\n      }\r\n\r\n      // Get their profiles\r\n      queryString = \"/users?login=\";\r\n      for (let i = 0; i < newStreamerArr.length; i++) {\r\n        if (i !== newStreamerArr.length - 1)\r\n          queryString += `${newStreamerArr[i].user_name}&login=`;\r\n        else queryString += newStreamerArr[i].user_name;\r\n      }\r\n\r\n      response = await twitch.get(queryString);\r\n      for (let existingStreamer of newStreamerArr) {\r\n        for (let streamerProfile of response.data.data) {\r\n          if (\r\n            existingStreamer.user_name.toLowerCase() === streamerProfile.login\r\n          ) {\r\n            existingStreamer[\"profile_image_url\"] =\r\n              streamerProfile.profile_image_url;\r\n          }\r\n        }\r\n      }\r\n      setStreamerArr(newStreamerArr);\r\n      setTimeout(getStreamerData, 12000);\r\n    };\r\n    getStreamerData();\r\n  };\r\n\r\n  const changeChannel = (url) => {\r\n    setCurrentChannel(url);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserData();\r\n  }, []);\r\n\r\n  return document.location.hash === \"\" ? (\r\n    <div className=\"flex h-screen\">\r\n      <span className=\"m-auto\">\r\n        <a\r\n          className=\"bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\"\r\n          href={`https://id.twitch.tv/oauth2/authorize?client_id=${clientId}&redirect_uri=${redirect_baseUri}&response_type=token&scope=channel_feed_read`}\r\n        >\r\n          Login\r\n        </a>\r\n      </span>\r\n    </div>\r\n  ) : streamerArr.length === 0 ? (\r\n    <div className=\"flex h-screen\">\r\n      <span className=\"m-auto text-white font-bold\">LOADING</span>\r\n    </div>\r\n  ) : (\r\n    <div className=\"h-screen w-screen\">\r\n      <TopNavbar streamerArr={streamerArr} changeChannel={changeChannel} />\r\n      <div className=\"hidden\">\r\n        <StreamerListSidebar\r\n          streamerArr={streamerArr}\r\n          changeChannel={changeChannel}\r\n        />\r\n      </div>\r\n      <div className=\"flex flex-col w-screen h-screen sm:flex-row\">\r\n        <div className=\"w-full h-1/2 sm:w-2/3 sm:h-full lg:w-4/5\">\r\n          <TwitchPlayer\r\n            url={currentChannel}\r\n            controls\r\n            playing\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n          />\r\n        </div>\r\n        <div className=\"w-full h-1/2 sm:w-1/3 sm:h-full lg:w-1/5\">\r\n          {currentChannel && (\r\n            <iframe\r\n              title=\"chat\"\r\n              frameBorder=\"0\"\r\n              scrolling=\"yes\"\r\n              id=\"chat_embed\"\r\n              src={`https://www.twitch.tv/embed/${currentChannel.substring(\r\n                22\r\n              )}/chat?parent=${chat_url}&darkpopout`}\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n            ></iframe>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/StreamerListSidebar/StreamerCard.js","components/Navbar/TopNavbar.jsx","components/StreamerListSidebar/StreamerListSidebar.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["StreamerCard","user_name","title","viewer_count","url","profile_image_url","changeChannel","Card","className","Button","onClick","CardImg","top","width","src","alt","CardBody","CardTitle","CardSubtitle","CardText","TopNavbar","streamerArr","Navbar","color","dark","Row","Col","NavbarBrand","href","type","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","user","i","key","toLowerCase","StreamerListSidebar","Nav","clientId","process","App","setState","currentChannel","state","userId","streamerIdArr","oauth","document","location","hash","substring","fetch","headers","Authorization","response","json","data","console","log","streamer","push","to_id","getStreamerData","a","queryString","length","newStreamerArr","attr","existingStreamer","streamerProfile","login","setTimeout","this","Container","fluid","controls","playing","height","frameBorder","scrolling","Component","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qcAyCeA,G,MA7BM,SAAC,GAOf,IANLC,EAMI,EANJA,UACAC,EAKI,EALJA,MACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,cAEA,OACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,kBACd,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMJ,EAAcF,KACnC,kBAACO,EAAA,EAAD,CACEC,KAAG,EACHC,MAAM,OACNC,IAAKT,EACLU,IAAI,kBAEN,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAYhB,GACZ,kBAACiB,EAAA,EAAD,KAAehB,GACf,kBAACiB,EAAA,EAAD,wBAAuBhB,UCwBpBiB,G,MApDG,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,YAAaf,EAAoB,EAApBA,cAChC,OACE,kBAACgB,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAAChB,UAAU,uCAClC,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKlB,UAAU,SACb,kBAACmB,EAAA,EAAD,CACEC,KAAK,2CACLpB,UAAU,0BAFZ,mBAOF,kBAACkB,EAAA,EAAD,CAAKlB,UAAU,SACb,yBAAKA,UAAU,sBACb,kBAACC,EAAA,EAAD,CACED,UAAU,oCACVqB,KAAK,SACLC,GAAG,qBACHC,cAAY,WACZC,gBAAc,OACdC,gBAAc,SANhB,aAUA,yBACEzB,UAAU,0CACV0B,kBAAgB,sBAEhB,wBAAI1B,UAAU,mBACXa,EAAYc,KAAI,SAACC,EAAMC,GACtB,OACE,kBAAC,EAAD,CACEC,IAAKjB,EAAYgB,GAAGP,GACpB7B,UAAWoB,EAAYgB,GAAGpC,UAC1BC,MAAOmB,EAAYgB,GAAGnC,MACtBC,aAAckB,EAAYgB,GAAGlC,aAC7BC,IAAG,gCAA2BiB,EAC5BgB,GACApC,UAAUsC,eACZlC,kBAAmBgB,EAAYgB,GAAGhC,kBAClCC,cAAeA,e,QCdtBkC,G,MA1Ba,SAAC,GAAoC,IAAlCnB,EAAiC,EAAjCA,YAAaf,EAAoB,EAApBA,cAC1C,OACE,kBAACmC,EAAA,EAAD,CAAKjC,UAAU,4BACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,mBACXa,EAAYc,KAAI,SAACC,EAAMC,GACtB,OACE,kBAAC,EAAD,CACEC,IAAKjB,EAAYgB,GAAGP,GACpB7B,UAAWoB,EAAYgB,GAAGpC,UAC1BC,MAAOmB,EAAYgB,GAAGnC,MACtBC,aAAckB,EAAYgB,GAAGlC,aAC7BC,IAAG,gCAA2BiB,EAC5BgB,GACApC,UAAUsC,eACZlC,kBAAmBgB,EAAYgB,GAAGhC,kBAClCC,cAAeA,Y,yBChB3BoC,EAAWC,iCA8JAC,E,YA3Jb,aAAe,IAAD,8BACZ,+CA+FFtC,cAAgB,SAACF,GACf,EAAKyC,SAAS,CAAEC,eAAgB1C,KA/FhC,EAAK2C,MAAQ,CACX1B,YAAa,GACbyB,eAAgB,IAJN,E,yOASRE,EAAS,GACTC,EAAgB,GACdC,E,iBAAkBC,SAASC,SAASC,KAAKC,UAAU,GAAI,K,kBAIpCC,MAAM,oCAAqC,CAChEC,QAAS,CAAEC,cAAeP,EAAO,YAAaR,K,cAD1CgB,E,gBAGaA,EAASC,O,OAAtBA,E,OACNX,EAASW,EAAKC,KAAK,GAAG9B,G,kDAEtB+B,QAAQC,IAAI,cAAZ,M,mCAKuBP,MAAM,qDAAD,OAC2BP,EAD3B,cAE1B,CACEQ,QAAS,CAAEC,cAAeP,EAAO,YAAaR,K,eAH5CgB,E,iBAMaA,EAASC,O,QAC5B,IADMA,E,oCACN,EAAuBA,EAAKC,KAA5B,+CAAWG,EAAuB,QAChCd,EAAce,KAAKD,EAASE,O,6RAG9BJ,QAAQC,IAAI,cAAZ,M,SAIII,E,uCAAkB,sEAAAC,EAAA,sDAIpB,IAJoB,SAGhBC,EAAc,+CACT/B,EAAI,EAAGA,EAAIY,EAAcoB,OAAQhC,IACpCA,IAAMY,EAAcoB,OAAS,EAC/BD,GAAW,UAAOnB,EAAcZ,GAArB,aACR+B,GAAenB,EAAcZ,GAPhB,gBAUCkB,MAAMa,EAAa,CACtCZ,QAAS,CAAEC,cAAeP,EAAO,YAAaR,KAX5B,cAUhBgB,EAVgB,gBAaHA,EAASC,OAbN,OAepB,IAFIA,EAbgB,OAchBW,EAAiB,GAdD,6BAepB,EAAqBX,EAAKC,KAA1B,+CAASG,EAAuB,SAC1BQ,EAAO,IACP,GAASR,EAASjC,GACtByC,EAAI,UAAgBR,EAAS9D,UAC7BsE,EAAI,MAAYR,EAAS7D,MACzBqE,EAAI,aAAmBR,EAAS5D,aAChCmE,EAAeN,KAAKO,GArBF,0OA0BpB,IADAH,EAAc,2CACL/B,EAAI,EAAGA,EAAIiC,EAAeD,OAAQhC,IACrCA,IAAMiC,EAAeD,OAAS,EAChCD,GAAW,UAAOE,EAAejC,GAAGpC,UAAzB,WACRmE,GAAeE,EAAejC,GAAGpC,UA7BpB,iBAgCHsD,MAAMa,EAAa,CAClCZ,QAAS,CAAEC,cAAeP,EAAO,YAAaR,KAjC5B,eAgCpBgB,EAhCoB,iBAmCPA,EAASC,OAnCF,QAmCpBA,EAnCoB,aAoCSW,EApCT,0CAqClB,IADOE,EApCW,kCAqClB,EAA4Bb,EAAKC,KAAjC,+CAASa,EAA8B,QAEnCD,EAAiBvE,UAAUsC,gBAAkBkC,EAAgBC,QAE7DF,EAAgB,kBACdC,EAAgBpE,mBA1CJ,sQA8CpB,EAAKwC,SAAS,CAAExB,YAAaiD,IAC7BK,WAAWT,EAAiB,MA/CR,kDAiDpBL,QAAQC,IAAI,cAAZ,MAjDoB,8G,yOA2DhB,IAAD,EACiCc,KAAK7B,MAArC1B,EADD,EACCA,YAAayB,EADd,EACcA,eACrB,MAAkC,KAA3BK,SAASC,SAASC,KACvB,kBAACwB,EAAA,EAAD,CAAWrE,UAAU,0DACnB,uBACEoB,KAAI,0DAAqDc,EAArD,uGAEJ,kBAACjC,EAAA,EAAD,CAAQD,UAAU,WAAlB,WAIJ,6BACE,kBAAC,EAAD,CACEa,YAAaA,EACbf,cAAesE,KAAKtE,gBAEtB,kBAACuE,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACrD,EAAA,EAAD,CAAKjB,UAAU,QACb,kBAACkB,EAAA,EAAD,CAAKlB,UAAU,sBACb,kBAAC,EAAD,CACEa,YAAaA,EACbf,cAAesE,KAAKtE,iBAGxB,kBAACoB,EAAA,EAAD,KACE,kBAAC,IAAD,CACEtB,IAAK0C,EACLiC,UAAQ,EACRC,SAAO,EACPnE,MAAM,OACNoE,OAAO,UAGX,kBAACvD,EAAA,EAAD,KACGoB,GACC,4BACE5C,MAAM,OACNgF,YAAY,IACZC,UAAU,MACVrD,GAAG,aACHhB,IAAG,sCAAiCgC,EAAeQ,UACjD,IADC,4CAGHzC,MAAM,OACNoE,OAAO,iB,GAjJPG,aCKEC,QACW,cAA7BC,OAAOlC,SAASmC,UAEe,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASvC,SAASwC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.59ca36ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardImg,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle\r\n} from \"reactstrap\";\r\nimport \"./StreamerCard.styles.scss\";\r\n\r\nconst StreamerCard = ({\r\n  user_name,\r\n  title,\r\n  viewer_count,\r\n  url,\r\n  profile_image_url,\r\n  changeChannel\r\n}) => {\r\n  return (\r\n    <div>\r\n      <Card className=\"ml-2 mr-2 mb-1\">\r\n        <Button onClick={() => changeChannel(url)}>\r\n          <CardImg\r\n            top\r\n            width=\"100%\"\r\n            src={profile_image_url}\r\n            alt=\"Profile Image\"\r\n          />\r\n          <CardBody>\r\n            <CardTitle>{user_name}</CardTitle>\r\n            <CardSubtitle>{title}</CardSubtitle>\r\n            <CardText>{`Viewers: ${viewer_count}`}</CardText>\r\n          </CardBody>\r\n        </Button>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StreamerCard;\r\n","import React from \"react\";\r\nimport { Navbar, NavbarBrand, Button, Row, Col } from \"reactstrap\";\r\nimport StreamerCard from \"../StreamerListSidebar/StreamerCard\";\r\nimport \"./TopNavbar.styles.scss\";\r\n\r\nconst TopNavbar = ({ streamerArr, changeChannel }) => {\r\n  return (\r\n    <Navbar color=\"dark\" dark className=\"fixed-top flex-md-nowrap p-0 shadow\">\r\n      <Row>\r\n        <Col className=\"col-6\">\r\n          <NavbarBrand\r\n            href=\"https://dzrana.github.io/live-streamers/\"\r\n            className=\"col-sm-3 col-md-2 mr-0\"\r\n          >\r\n            Live Streamers\r\n          </NavbarBrand>\r\n        </Col>\r\n        <Col className=\"col-6\">\r\n          <div className=\"d-xl-none dropdown\">\r\n            <Button\r\n              className=\"btn btn-secondary dropdown-toggle\"\r\n              type=\"button\"\r\n              id=\"dropdownMenuButton\"\r\n              data-toggle=\"dropdown\"\r\n              aria-haspopup=\"true\"\r\n              aria-expanded=\"false\"\r\n            >\r\n              Streamers\r\n            </Button>\r\n            <div\r\n              className=\"dropdown-menu bg-dark sidebar streamers\"\r\n              aria-labelledby=\"dropdownMenuButton\"\r\n            >\r\n              <ul className=\"nav flex-column\">\r\n                {streamerArr.map((user, i) => {\r\n                  return (\r\n                    <StreamerCard\r\n                      key={streamerArr[i].id}\r\n                      user_name={streamerArr[i].user_name}\r\n                      title={streamerArr[i].title}\r\n                      viewer_count={streamerArr[i].viewer_count}\r\n                      url={`https://www.twitch.tv/${streamerArr[\r\n                        i\r\n                      ].user_name.toLowerCase()}`}\r\n                      profile_image_url={streamerArr[i].profile_image_url}\r\n                      changeChannel={changeChannel}\r\n                    />\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Navbar>\r\n  );\r\n};\r\nexport default TopNavbar;\r\n","import React from \"react\";\r\nimport { Nav } from \"reactstrap\";\r\nimport StreamerCard from \"./StreamerCard\";\r\nimport \"./StreamerListSidebar.styles.scss\";\r\n\r\nconst StreamerListSidebar = ({ streamerArr, changeChannel }) => {\r\n  return (\r\n    <Nav className=\"col-md-2 bg-dark sidebar\">\r\n      <div className=\"sidebar-sticky\">\r\n        <ul className=\"nav flex-column\">\r\n          {streamerArr.map((user, i) => {\r\n            return (\r\n              <StreamerCard\r\n                key={streamerArr[i].id}\r\n                user_name={streamerArr[i].user_name}\r\n                title={streamerArr[i].title}\r\n                viewer_count={streamerArr[i].viewer_count}\r\n                url={`https://www.twitch.tv/${streamerArr[\r\n                  i\r\n                ].user_name.toLowerCase()}`}\r\n                profile_image_url={streamerArr[i].profile_image_url}\r\n                changeChannel={changeChannel}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default StreamerListSidebar;\r\n","import React, { Component } from \"react\";\r\nimport TopNavbar from \"../components/Navbar/TopNavbar\";\r\nimport StreamerListSidebar from \"../components/StreamerListSidebar/StreamerListSidebar\";\r\nimport TwitchPlayer from \"react-player/lib/players/Twitch\";\r\nimport { Container, Row, Col, Button } from \"reactstrap\";\r\nvar clientId = process.env.REACT_APP_CLIENT_ID;\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      streamerArr: [],\r\n      currentChannel: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let userId = \"\";\r\n    let streamerIdArr = [];\r\n    const oauth = `Bearer ${document.location.hash.substring(14, 44)}`;\r\n\r\n    // Get logged-in user's id.\r\n    try {\r\n      const response = await fetch(`https://api.twitch.tv/helix/users`, {\r\n        headers: { Authorization: oauth, \"Client-ID\": clientId },\r\n      });\r\n      const json = await response.json();\r\n      userId = json.data[0].id;\r\n    } catch (error) {\r\n      console.log(\"ERROR BRO: \", error);\r\n    }\r\n\r\n    // Get logged-in user's list of followed channels using the received id.\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.twitch.tv/helix/users/follows?from_id=${userId}&first=100`,\r\n        {\r\n          headers: { Authorization: oauth, \"Client-ID\": clientId },\r\n        }\r\n      );\r\n      const json = await response.json();\r\n      for (const streamer of json.data) {\r\n        streamerIdArr.push(streamer.to_id);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ERROR BRO: \", error);\r\n    }\r\n\r\n    // Get LIVE channels and their channel profiles.\r\n    const getStreamerData = async () => {\r\n      try {\r\n        // Get LIVE channels\r\n        let queryString = \"https://api.twitch.tv/helix/streams?user_id=\";\r\n        for (let i = 0; i < streamerIdArr.length; i++) {\r\n          if (i !== streamerIdArr.length - 1)\r\n            queryString += `${streamerIdArr[i]}&user_id=`;\r\n          else queryString += streamerIdArr[i];\r\n        }\r\n\r\n        let response = await fetch(queryString, {\r\n          headers: { Authorization: oauth, \"Client-ID\": clientId },\r\n        });\r\n        let json = await response.json();\r\n        let newStreamerArr = [];\r\n        for (let streamer of json.data) {\r\n          let attr = {};\r\n          attr[\"id\"] = streamer.id;\r\n          attr[\"user_name\"] = streamer.user_name;\r\n          attr[\"title\"] = streamer.title;\r\n          attr[\"viewer_count\"] = streamer.viewer_count;\r\n          newStreamerArr.push(attr);\r\n        }\r\n\r\n        // Get their profiles\r\n        queryString = \"https://api.twitch.tv/helix/users?login=\";\r\n        for (let i = 0; i < newStreamerArr.length; i++) {\r\n          if (i !== newStreamerArr.length - 1)\r\n            queryString += `${newStreamerArr[i].user_name}&login=`;\r\n          else queryString += newStreamerArr[i].user_name;\r\n        }\r\n\r\n        response = await fetch(queryString, {\r\n          headers: { Authorization: oauth, \"Client-ID\": clientId },\r\n        });\r\n        json = await response.json();\r\n        for (let existingStreamer of newStreamerArr) {\r\n          for (let streamerProfile of json.data) {\r\n            if (\r\n              existingStreamer.user_name.toLowerCase() === streamerProfile.login\r\n            ) {\r\n              existingStreamer[\"profile_image_url\"] =\r\n                streamerProfile.profile_image_url;\r\n            }\r\n          }\r\n        }\r\n        this.setState({ streamerArr: newStreamerArr });\r\n        setTimeout(getStreamerData, 12000);\r\n      } catch (error) {\r\n        console.log(\"ERROR BRO: \", error);\r\n      }\r\n    };\r\n    getStreamerData();\r\n  }\r\n\r\n  changeChannel = (url) => {\r\n    this.setState({ currentChannel: url });\r\n  };\r\n\r\n  render() {\r\n    const { streamerArr, currentChannel } = this.state;\r\n    return document.location.hash === \"\" ? (\r\n      <Container className=\"d-flex justify-content-center align-items-center login\">\r\n        <a\r\n          href={`https://id.twitch.tv/oauth2/authorize?client_id=${clientId}&redirect_uri=https://dzrana.github.io/live-streamers/&response_type=token&scope=channel_feed_read`}\r\n        >\r\n          <Button className=\"bg-dark\">Login</Button>\r\n        </a>\r\n      </Container>\r\n    ) : (\r\n      <div>\r\n        <TopNavbar\r\n          streamerArr={streamerArr}\r\n          changeChannel={this.changeChannel}\r\n        />\r\n        <Container fluid>\r\n          <Row className=\"pt-5\">\r\n            <Col className=\"d-none d-xl-block \">\r\n              <StreamerListSidebar\r\n                streamerArr={streamerArr}\r\n                changeChannel={this.changeChannel}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <TwitchPlayer\r\n                url={currentChannel}\r\n                controls\r\n                playing\r\n                width=\"63vw\"\r\n                height=\"94vh\"\r\n              />\r\n            </Col>\r\n            <Col>\r\n              {currentChannel && (\r\n                <iframe\r\n                  title=\"chat\"\r\n                  frameBorder=\"0\"\r\n                  scrolling=\"yes\"\r\n                  id=\"chat_embed\"\r\n                  src={`https://www.twitch.tv/embed/${currentChannel.substring(\r\n                    22\r\n                  )}/chat?parent=dzrana.github.io&darkpopout`}\r\n                  width=\"100%\"\r\n                  height=\"100%\"\r\n                ></iframe>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}